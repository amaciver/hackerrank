{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Enter your code here. Read input from STDIN. Print output to STDOUT\
x = gets.strip.to_i\
n = gets.strip.to_i\
\
def power_sum(i = 1, x, n)\
    return 1 if x == 0\
    return 0 if x < 0\
    count = 0\
    (i..(Math.sqrt(x).to_i)).each do |i|\
        count += power_sum(i + 1, x-i**n, n)\
        \
    end\
    count\
end\
print power_sum(x, n)\
            \
\
# Enter your code here. Read input from STDIN. Print output to STDOUTgrid\
grid = []\
10.times \{ grid << gets.strip \}\
words = gets.chomp.split(';')\
\
def find_slots(grid)\
    slots = []\
    grid.each_with_index do |row, y|\
        slot = []\
        started = false\
        row.chars.each_with_index do |sq, x|\
            if sq == '-' && !started\
                slot << [y,x] \
                started = true\
            elsif sq == '+' && started\
                slots << slot if slot.length > 1\
                slot = []\
                started = false\
            elsif sq == '-' && started\
               slot << [y,x]\
            else\
                next\
            end\
        end\
        slots << slot if slot.length > 1\
    end\
    \
    x = 0\
    while x < grid[0].length\
        y = 0\
        slot = []\
        started = false\
        while y < grid.length\
            sq = grid[y][x]\
            if sq == '-' && !started\
                slot << [y,x] \
                started = true\
            elsif sq == '+' && started\
                slots << slot if slot.length > 1\
                slot = []\
                started = false\
            elsif sq == '-' && started\
               slot << [y,x]\
            else\
                \
            end\
            y += 1\
        end\
        x += 1\
        slots << slot if slot.length > 1\
    end\
    slots\
end\
\
def find_int(slots)\
    results = []\
    i = 0\
    while i < slots.length\
        this = slots[i]\
       \
        j = i + 1\
        while j < slots.length\
            that = slots[j]\
            results << (this & that)\
            \
            j += 1\
        end\
        i += 1\
    end\
    ints = results.reject\{ |el| el.empty? \}\
    ints.each do |int|\
        slots.each_with_index do |slot, idx|\
            int << \{slot: idx, place: slot.index(int[0])\} if slot.index(int[0])\
        end\
    end\
end\
\
def try_words(slots, ints, words)\
    results = []\
    slots.each_with_index do |slot, idx|\
        words_of_length = words.select\{ |word| word.length == slot.length \}\
        results << word \
        words_of_length.each do |word|\
            results << word if words_of_length.length == 1\
            \
        end\
    end\
    \
    \
end\
            \
            \
            \
        \
def fill(grid, words, slots)\
    \
    return grid if grid.all?\{ |row| row.chars.none? \{ |sq| sq == '-'\} \}\
    return nil if words.empty? || slots.empty?\
    temp_grid = []\
    slots.sort.each_with_index do |slot, idx1| #take each slot\
        words.each do |word| #try each word\
            temp_grid = grid.dup\
\
            if word.length == slot.length #if the slot is the right length\
                \
                entered = false\
                slot.each_with_index do |coord, idx3| #copy the word into the slot if valid\
                    y, x = coord\
                    if temp_grid[y][x] == '-' || temp_grid[y][x] == word[idx3]\
                        temp_grid[y][x] = word[idx3]\
                        entered = true\
\
                    else\
                        \
                        temp_grid = grid.dup\
                        entered = false\
                        \
                    end\
                    break unless entered\
                end\
                if entered\
                    new_slots = slots.reject\{|el| el == slot \} \
                    new_words = words.reject\{|el| el == word \}\
                    temp_grid = fill(temp_grid, new_words, new_slots)\
                end\
            end\
        end\
    end\
    temp_grid\
end\
\
slots = find_slots(grid)\
ints = find_int(slots)\
puts fill(grid, words, slots)\
\
\
\
######\
\
n, k = gets.chomp.split\
k = k.to_i\
\
\
\
\
def d_root(num)\
    return num if num < 10\
    sum = num.to_s.chars.map(&:to_i).inject(:+)\
    return d_root(sum)\
end\
\
def sum(n, k)\
    d_root((d_root(n.to_i).to_s * k).to_i)\
end\
\
p sum(n,k)\
\
\
\
######\
\
\
t = gets.chomp.to_i\
\
def eval(words, login, str = '', list = [])\
   \
    words.each do |word|\
        temp_list = list.dup\
        temp_str = str\
        temp_str += word\
        next if temp_str.length > login.length\
        next unless login.start_with?(temp_str)\
        temp_list << word\
        return temp_list.join(' ') if temp_str == login\
        return eval(words, login, temp_str, temp_list) \
    end\
    return "WRONG PASSWORD"\
end\
     \
\
t.times do\
    n = gets.chomp.to_i\
    words = gets.chomp.split(" ")\
    login = gets.chomp\
    puts eval(words, login)\
end\
\
\
\
#######\
ARITHMETIC EXPRESSIONS\
\
# Enter your code here. Read input from STDIN. Print output to STDOUT\
n = gets.chomp.to_i\
list = gets.strip.split(' ').map\{ |el| el.to_i \}\
\
\
def exp(list, str = '', eval = nil, results = [])\
    if eval != nil && eval % 101 == 0\
        list.each do |el|\
            str += "*"\
            str += el.to_s\
           # p 'loop'\
        end\
        return str\
    end\
    return str if eval != nil && eval % 101 == 0 && list.length == 0\
    return nil if list.length == 0\
    if str == ''\
        eval = list[0]\
        \
        str += list[0].to_s\
        list = list.drop(1)\
    end\
        \
    operators = ['+', '-', '*']\
    3.times do |i|\
        temp_str = str\
        \
        temp_str += operators[i]\
        temp_str += list[0].to_s\
        temp_eval = eval.method(operators[i]).(list[0]) % 101\
       \
        results << exp(list[1..-1], temp_str, temp_eval, results)\
        results = results.uniq\
    end\
    results.reject\{ |el| el.nil? \}.flatten[-1]\
end\
\
puts exp(list)\
\
def exp2(list)\
    results = Hash.new(list[0])\
    list.drop(1)\
    \
    \
#########\
K-FACTORIZATION\
\
# Enter your code here. Read input from STDIN. Print output to STDOUT\
n, k = gets.chomp.split(' ').map(&:to_i)\
list = gets.chomp.split(' ').map(&:to_i).sort\
\
class Fact\
    def initialize\
        @store = []\
    end\
    \
    def k_fact(n, list, curr = 1, results = Array.new(1)\{1\})\
        p curr\
        list = list.reject\{ |el| n % el != 0 \}\
        unless curr == 1\
            list = list.reject\{ |el| el < curr && curr % el != 0 \}\
        end\
        @store << results if curr == n\
        \
        return -1 if curr > n\
        list.each do |i|\
            temp_results = results.dup\
            temp_curr = curr\
            temp_curr *= i\
\
            break if temp_curr > n\
            temp_results << temp_curr\
\
            k_fact(n, list, temp_curr, temp_results).flatten.uniq\
\
        end\
        @store.empty? ? [[-1]] : @store\
    end\
    \
    def k2(n, list, curr = n, results = Array.new(1)\{n\})\
        @store << results if curr == 1\
        list.each do |i|\
           \
            temp_curr = curr\
            \
            temp_results = results.dup\
            temp_curr /= i\
            \
            temp_results.unshift(temp_curr) \
            k2(n, list.reject\{ |el| temp_curr / el < 1 \}, temp_curr, temp_results)\
            \
        end\
        @store.empty? ? [[-1]] : @store    \
    end\
    \
    def k3(n, list)\
        results = []\
        curr = n\
        i = 0 \
        #p list\
        \
        temp_list = list\
        while i < temp_list.length\
            #p i\
            until curr % list[i] != 0\
                \
                #p "current before: #\{curr\}"\
                #p "list_el: #\{list[i]\}"\
                curr /= list[i] \
                results << curr\
                #p "current after: #\{curr\}"              \
            end\
            \
               \
            i += 1\
        end\
        results.unshift(n)\
       \
        results[-1] == 1 ? results.reverse : [-1]\
    end\
end\
     \
k = Fact.new\
\
# k.k_fact(n, list.reject\{ |el| n % el != 0 \}).sort_by(&:length)[0].each\{|el| print el.to_s + " "\}\
\
# k.k2(n, list.reverse.reject\{ |el| n % el != 0 \}).sort_by(&:length)[0].each\{|el| print el.to_s + " "\}\
\
k.k3(n, list.reverse.reject\{ |el| n % el != 0 \}).each\{|el| print el.to_s + " "\}\
\
###########\
CUT STICKS\
\
n = gets.strip.to_i\
arr = gets.strip\
arr = arr.split(' ').map(&:to_i)\
\
until arr.length == 0\
    min = arr.min\
    arr.map! do |el|\
        el -= min\
    end\
    puts arr.length\
arr = arr.reject\{ |el| el < 1 \}\
end\
\
\
#######\
\
ALMOST SORTED\
\
\
# Enter your code here. Read input from STDIN. Print output to STDOUT\
n = gets.chomp.to_i\
arr = gets.chomp.split(' ').map(&:to_i)\
\
def calc(arr)\
    \
    arr.each_with_index do |el, i|\
        next if i == arr.length-1\
        next if el < arr[i+1]\
        returnable = false\
        j = i + 1\
        while j < arr.length\
            unless j == arr.length-1 \
                   break if  arr[j] > arr[j+1]\
            end\
            break if arr[j] > arr[i+1]\
            if j == arr.length-1 || ( (i == 0 && el < arr[j + 1] && arr[j+1] < arr[i+1]) || (el < arr[j + 1] && arr[j] > arr[i-1]) )\
\
                puts 'yes'\
                puts "swap #\{i+1\} #\{j+1\}"\
                returnable = true\
                return\
\
            end\
            j += 1\
        end\
        unless returnable\
            j = i \
            start_el = arr[i]\
            #while j < arr.length\
            #puts start_el\
                until j >= arr.length || arr[j+1] > arr[j]\
\
                    j += 1\
                end\
                finish = j\
\
            #end\
            if j == arr.length || start_el <= arr[j+1]\
                puts "yes"\
                puts "reverse #\{i+1\} #\{j+1\}"\
                break\
            else\
                puts "no"\
                break\
            end\
        end\
    end\
end\
calc(arr)\
\
\
########\
\
LARRY\'92S ARRAY \'97> relies on parity of the number of swaps\
\
t = gets.chomp.to_i\
\
def calc3(arr)\
    sorted = false\
    arr1 = arr.dup\
    count = 0\
    until sorted\
        sorted = true\
        i = 0\
        while i < arr1.length - 1\
            \
            if arr1[i] > arr1[i+1]\
                arr1[i], arr1[i+1] = arr1[i+1], arr1[i]\
                count += 1\
                sorted = false\
            end\
            i += 1\
        end\
    end\
    \
    count\
end\
\
t.times do \
    n = gets.chomp.to_i\
    arr = gets.chomp.split(' ').map(&:to_i)\
    \
    r = calc3(arr)\
   \
    puts ((r % 2) == 0 ? "YES" : "NO")\
end\
\
######\
INSERTION SORT PART 1\
\
def  insertionSort( arr) \
    idx = arr.length-1\
    val = arr[idx]\
    until idx == 0 || val > arr[idx-1]\
        arr[idx] = arr[idx-1]\
        puts arr.map(&:to_s).join(" ")\
        \
        idx -= 1\
    end\
    arr[idx] = val\
    puts arr.map(&:to_s).join(" ")\
end\
count = gets.to_i\
arr = gets.strip.split.map \{|i| i.to_i\}\
\
insertionSort( arr )\
\
#######\
}